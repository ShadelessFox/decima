package com.shade.decima.rtti.generated;

import com.shade.decima.rtti.data.ClassTypeInfo;
import com.shade.decima.rtti.data.TypeInfo;
import com.shade.decima.rtti.generator.TypeContext;
import com.shade.decima.rtti.generator.TypeGenerator;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

public class TypeGeneratorTest {
    public static void main(String[] args) throws IOException {
        TypeContext context = new TypeContext();
        context.load(Path.of("data/until_dawn_rtti.json"));

        TypeGenerator generator = new TypeGenerator();
        List<TypeSpec> types = new ArrayList<>();

        for (TypeInfo type : context.types()) {
            if (type instanceof ClassTypeInfo cls && cls.isAssignableTo("ExportedSymbolGroup")) {
                continue;
            }
            TypeSpec spec = generator.generate(type);
            if (spec != null) {
                types.add(spec);
            }
        }

        TypeSpec root = TypeSpec.interfaceBuilder("UntilDawn")
            .addModifiers(Modifier.PUBLIC)
            .addAnnotation(AnnotationSpec.builder(SuppressWarnings.class)
                .addMember("value", "$S", "unused")
                .build())
            .addTypes(types)
            .build();

        JavaFile file = JavaFile.builder("com.shade.decima.rtti.generated", root)
            .addFileComment("This file was autogenerated. Do not edit!")
            .build();

        file.writeTo(Path.of("modules/decima-rtti/src/main/java"));
    }
}
